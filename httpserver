#!/usr/bin/python3
from http.server import *
import sys
import csv
from queue import PriorityQueue
import os
import time
import requests

ORIGIN = "cs5700cdnorigin.ccs.neu.edu"


class Cache:
    def __init__(self):
        self.cache_dict = dict()
        self.size = 20 * 1024 * 1024
        self.current = 0
        self.freq_dict = self.init_freq()
        self.pq = PriorityQueue()

    def add(self, path, content):
        """
        Add content to cache and check the total size of the cache.
        :param path: the path of the content
        :param content: the actual content
        :return: nothing
        """
        self.cache_dict[path] = content
        self.current += sys.getsizeof(content)

        if path not in self.freq_dict.keys():
            self.pq.put((0, path))
        else:
            self.pq.put((self.freq_dict[path], path))

        if self.current <= self.size:
            return
        else:
            while self.current > self.size:
                item = self.pq.get()
                item_path = item[1]
                self.current -= sys.getsizeof(self.cache_dict[item_path])
                del self.cache_dict[item_path]
            return

    def get(self, path):
        """
        Get the content of the path.
        :param path: the path related to the content
        :return: if we have cached the content, return the content, otherwise return none.
        """
        if path in self.cache_dict.keys():
            return self.cache_dict[path]
        else:
            return None

    def init_freq(self):
        """
        Generate a dictionary the store each path in pageviews.csv and the corresponding frequency.
        :return: a dictionary the store each path in pageviews.csv and the corresponding frequency
        """
        result = dict()

        with open('pageviews.csv', newline='') as pages:
            lines = csv.reader(pages, delimiter=',')
            for line in lines:
                path = "/" + line[0]
                freq = int(line[1])
                result[path] = freq

        return result


cache = Cache()


def get_content(port, path):
    """
    Get content from the origin server.
    :param port: the port number of the origin server
    :param path: the path specifies what content to get
    :return: the content related to the path
    """
    try:
        url = "http://" + ORIGIN + ":" + str(port) + path
        return requests.get(url).content
    except:
        return b''


class RequestHandler(BaseHTTPRequestHandler):
    def log_message(self, str_format, *args):
        pass

    def do_GET(self):
        """
        Handle the GET request.
        :return: nothing
        """
        if self.path == "/grading/beacon":
            self.send_response(204)
            self.send_header('Content-Type', 'text/html')
            self.send_header('Content-Length', "0")
            self.send_header('Connection', 'close')
            self.end_headers()
            return
        if self.path.startswith("/li_huang"):
            temp = self.path
            ip = temp.replace("/li_huang/", "")
            command = "scamper -c 'ping -c 1 -i 1' -i {}".format(ip)
            result = os.popen(command).read()
            os.wait()
            self.send_response(200)
            self.send_header('Content-Type', 'text/html')
            self.end_headers()
            self.wfile.write(result.encode())
            return

        content = cache.get(self.path)
        if content is None:
            content = get_content(8080, self.path)
            self.send_response(200)
            self.send_header('Content-Type', 'text/html')
            self.send_header('Content-Length', str(len(content)))
            self.send_header('Connection', 'close')
            self.end_headers()
            try:
                self.wfile.write(content)
            except:
                pass
            cache.add(self.path, content)
        else:
            self.send_response(200)
            self.send_header('Content-Type', 'text/html')
            self.send_header('Content-Length', str(len(content)))
            self.send_header('Connection', 'close')
            self.end_headers()
            try:
                self.wfile.write(content)
            except:
                pass


def main():
    global ORIGIN
    port = int(sys.argv[2])
    ORIGIN = sys.argv[4]
    server = HTTPServer(('0.0.0.0', port), RequestHandler)

    try:
        server.serve_forever()
    except:
        pass
    finally:
        server.server_close()


main()
