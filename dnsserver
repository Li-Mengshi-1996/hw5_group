#!/usr/bin/python3
from dnslib import *
import sys
import socket
import json
import math
import requests

replica_servers = ["p5-http-a.5700.network", "p5-http-b.5700.network", "p5-http-c.5700.network",
                   "p5-http-d.5700.network", "p5-http-e.5700.network", "p5-http-f.5700.network",
                   "p5-http-g.5700.network"]


def get_geoLocation(ip):
    try:
        url = ('https://geolite.info/geoip/v2.1/city/' + ip + '?pretty')
        response = requests.get(url, auth=('708079', 'xYVsrhhTQiHs9b0M')).content.decode()
        json_str = json.loads(response)
        latitude = json_str['location']['latitude']
        longitude = json_str['location']['longitude']
        return float(latitude), float(longitude)
    except:
        return None, None


def create_replica_info():
    result = []
    for host in replica_servers:
        ip = socket.gethostbyname(host)
        lat, lon = get_geoLocation(ip)
        if lat is None or lon is None:
            lat = 0
            lon = 0

        temp = {"host": host, "ip": ip, "latitude": lat, "longitude": lon}
        result.append(temp)

    return result


REPLICA_INFO = create_replica_info()


def get_geo_distance(lat1, lon1, lat2, lon2):
    r = abs(lon1 - lon2)
    if r > 180:
        r = 360 - r

    return math.pow(lat1 - lat2, 2) + math.pow(r, 2)


def get_nearest_ip(source_ip):
    latitude, longitude = get_geoLocation(source_ip)
    if latitude is None or longitude is None:
        return REPLICA_INFO[0]['ip']
    best_dist = -1
    best_cdn = None
    for c in REPLICA_INFO:
        dist = get_geo_distance(latitude, longitude, c['latitude'], c['longitude'])
        if best_cdn is None:
            best_dist = dist
            best_cdn = c['ip']
            continue
        if best_dist > dist:
            best_dist = dist
            best_cdn = c['ip']
    return best_cdn


def get_best_cdn(source_ip):
    ip = get_nearest_ip(source_ip)

    return ip


def build_response(data, addr, domain, cache):
    domain = domain + "."
    request = DNSRecord.parse(data)
    reply = DNSRecord(DNSHeader(id=request.header.id, qr=1, aa=1, ra=1), q=request.q)

    q_name = str(request.q.qname)
    qt = QTYPE[request.q.qtype]

    if qt == 'A' and (q_name == domain or q_name.endswith('.' + domain)):
        if addr[0] not in cache.keys():
            cache[addr[0]] = get_best_cdn(addr[0])
        ip = cache[addr[0]]
        reply.add_answer(RR(rname=request.q.qname, rtype=QTYPE.A, ttl=300, rdata=A(ip)))

    return reply.pack()


def receive(sock):
    result = b''
    addr = None
    while True:
        data, addr = sock.recvfrom(1024)
        result += data

        if not data or len(data) < 1024:
            break
    return result, addr


def start(sock, domain, cache):
    while True:
        data, address = receive(sock)
        response = build_response(data, address, domain, cache)
        sock.sendto(response, address)


def main():
    port = int(sys.argv[2])
    name = sys.argv[4]

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind(('0.0.0.0', port))

    cache = dict()

    try:
        start(sock, name, cache)
    except:
        pass
    finally:
        sock.close()

    # print(args.n)
    # print(args.p)


main()
