#!/usr/bin/python3
from dnslib import *
import sys
import socket
import json
import math
import requests
import urllib.request
import threading
import time

DNS_NODE = {
    'host': "p5-dns.5700.network",
    'ip': "45.33.90.91",
    "latitude": 40.738731384277344,
    "longitude": -74.19452667236328
}
try:
    host_file = open("dns-hosts.txt")
    replica_servers = []
    for line in host_file.readlines():
        replica_servers.append(line.strip())
    host_file.close()
except:
    replica_servers = ["p5-http-a.5700.network", "p5-http-b.5700.network", "p5-http-c.5700.network",
                       "p5-http-d.5700.network", "p5-http-e.5700.network", "p5-http-f.5700.network",
                       "p5-http-g.5700.network"]


####################################################
########## Use geolocation to get best ip ##########
####################################################

def get_geoLocation(ip):
    """
    Given an ip, return its latitude and longitude.
    :param ip: an ip address
    :return: the latitude and longitude of the ip
    """
    try:
        url = ('https://geolite.info/geoip/v2.1/city/' + ip + '?pretty')
        response = requests.get(url, auth=('708079', 'xYVsrhhTQiHs9b0M')).content.decode()
        json_str = json.loads(response)
        latitude = json_str['location']['latitude']
        longitude = json_str['location']['longitude']
        return float(latitude), float(longitude)
    except:
        return None, None


def create_replica_info():
    """
    Generate information for each replica in replica_servers.
    :return: a list contains information for each replica
    """
    result = []
    for host in replica_servers:
        ip = socket.gethostbyname(host)
        lat, lon = get_geoLocation(ip)
        if lat is None or lon is None:
            lat = 0
            lon = 0

        temp = {"host": host, "ip": ip, "latitude": lat, "longitude": lon}
        result.append(temp)

    return result


REPLICA_INFO = create_replica_info()
source_ip_list = []


def get_geo_distance(lat1, lon1, lat2, lon2):
    """
    Given the latitude and longitude of two points, returns the distance between them.
    :param lat1: latitude for the first point
    :param lon1: longitude for the first point
    :param lat2: latitude for the second point
    :param lon2: longitude for the first point
    :return: the distance between two points
    """
    r = abs(lon1 - lon2)
    if r > 180:
        r = 360 - r

    return math.pow(lat1 - lat2, 2) + math.pow(r, 2)


def get_best_cdn(source_ip):
    """
    Get the nearest replica for source_ip
    :param source_ip: an ip address
    :return: the nearest replica for source_ip
    """
    latitude, longitude = get_geoLocation(source_ip)
    if latitude is None or longitude is None:
        return REPLICA_INFO[0]['ip']
    best_dist = -1
    best_cdn = None
    for c in REPLICA_INFO:
        dist = get_geo_distance(latitude, longitude, c['latitude'], c['longitude'])
        if best_cdn is None:
            best_dist = dist
            best_cdn = c['ip']
            continue
        if best_dist > dist:
            best_dist = dist
            best_cdn = c['ip']
    return best_cdn


###################################################
########## Use scamper to update best ip ##########
###################################################

def get_rtt(info):
    """
    Get latency time from info
    :param info: a string
    :return: the latency time in ms
    """
    left = info.find("time=")
    right = info.find(" ms")

    rtt = info[left + 5: right]
    return float(rtt)


def active_measurement(source_ip, port):
    """
    Find the lowest latency replica server for source ip.
    :param source_ip: an ip address
    :param port: the port number each replica connect
    :return: the ip of the lowest latency replica server for source ip
    """
    best_rtt = -1
    best_ip = None

    for replica in REPLICA_INFO:
        host = replica['host']

        try:
            url = "http://{}:{}/li_huang/{}".format(host, str(port), source_ip)
            req = urllib.request.urlopen(url)
            data = req.read().decode()

            rtt = get_rtt(data)

            if best_ip is None:
                best_rtt = rtt
                best_ip = replica["ip"]
            else:
                if best_rtt > rtt:
                    best_rtt = rtt
                    best_ip = replica["ip"]
        except:
            continue

    return best_ip


def scamper_update(cache, port):
    """
    Update the best ip for each source ip in cache every 300 seconds.
    :param cache: a dictionary, key is source ip, value is the best ip for the source ip
    :param port: the port number each replica connect
    :return: nothing.
    """
    while True:
        try:
            ip_count = len(source_ip_list)

            if ip_count == 0:
                time.sleep(300)
                continue

            for i in range(0, ip_count):
                b_ip = active_measurement(source_ip_list[i], port)
                if b_ip is None:
                    continue
                cache[source_ip_list[i]] = b_ip

            time.sleep(300)
        except:
            time.sleep(300)
            continue


################################
########## DNS server ##########
################################

def build_response(data, addr, domain, cache):
    domain = domain + "."
    request = DNSRecord.parse(data)
    reply = DNSRecord(DNSHeader(id=request.header.id, qr=1, aa=1, ra=1), q=request.q)

    q_name = str(request.q.qname)
    qt = QTYPE[request.q.qtype]

    if qt == 'A' and (q_name == domain or q_name.endswith('.' + domain)):
        if addr[0] not in cache.keys():
            cache[addr[0]] = get_best_cdn(addr[0])
            source_ip_list.append(addr[0])

        ip = cache[addr[0]]
        reply.add_answer(RR(rname=request.q.qname, rtype=QTYPE.A, ttl=300, rdata=A(ip)))

    return reply.pack()


def receive(sock):
    result = b''
    addr = None
    while True:
        data, addr = sock.recvfrom(1024)
        result += data

        if not data or len(data) < 1024:
            break
    return result, addr


def start(sock, domain, cache):
    while True:
        data, address = receive(sock)
        response = build_response(data, address, domain, cache)
        sock.sendto(response, address)


def main():
    port = int(sys.argv[2])
    name = sys.argv[4]

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind(('0.0.0.0', port))

    cache = dict()

    threads = []
    threads.append(threading.Thread(target=start, args=(sock, name, cache)))
    threads.append(threading.Thread(target=scamper_update, args=(cache, port)))

    try:
        for t in threads:
            t.start()
        for t in threads:
            t.join()
    except:
        pass
    finally:
        t_file = open("result.txt", "a+")
        t_file.write("FINISH\n")

        t_file.close()
        sock.close()


main()
